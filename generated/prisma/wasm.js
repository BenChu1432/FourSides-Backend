
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClusterScalarFieldEnum = {
  id: 'id',
  cluster_name: 'cluster_name',
  cluster_summary: 'cluster_summary',
  processed_at: 'processed_at'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  media_name: 'media_name',
  url: 'url',
  title: 'title',
  origin: 'origin',
  content: 'content',
  content_en: 'content_en',
  published_at: 'published_at',
  authors: 'authors',
  images: 'images',
  clusterId: 'clusterId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  isBlocked: 'isBlocked',
  onboardingNeeded: 'onboardingNeeded',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  canSendNotification: 'canSendNotification',
  gameMode: 'gameMode',
  seeReportingMerits: 'seeReportingMerits',
  seeMisguidingTechniques: 'seeMisguidingTechniques',
  seeReportingStyle: 'seeReportingStyle',
  seeReportingIntention: 'seeReportingIntention',
  removeSensationalHeadlines: 'removeSensationalHeadlines',
  removeCopyPasteArticles: 'removeCopyPasteArticles',
  topicsInterestedIn: 'topicsInterestedIn',
  regionsInterestedIn: 'regionsInterestedIn',
  politicalStance: 'politicalStance',
  identity: 'identity'
};

exports.Prisma.UserAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  authProvider: 'authProvider',
  email: 'email',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  verificationToken: 'verificationToken',
  emailVerified: 'emailVerified'
};

exports.Prisma.ScrapeFailureScalarFieldEnum = {
  id: 'id',
  failure_type: 'failure_type',
  media_name: 'media_name',
  url: 'url',
  reason: 'reason',
  timestamp: 'timestamp',
  resolved: 'resolved'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.MediaNameEnum = exports.$Enums.MediaNameEnum = {
  CTS: 'CTS',
  TSSDNews: 'TSSDNews',
  CTWant: 'CTWant',
  TaiwanNews: 'TaiwanNews',
  TTV: 'TTV',
  CTINews: 'CTINews',
  HongKongFreePress: 'HongKongFreePress',
  MingPaoNews: 'MingPaoNews',
  SingTaoDaily: 'SingTaoDaily',
  SCMP: 'SCMP',
  ChineseNewYorkTimes: 'ChineseNewYorkTimes',
  DeutscheWelle: 'DeutscheWelle',
  HKFreePress: 'HKFreePress',
  WenWeiPo: 'WenWeiPo',
  OrientalDailyNews: 'OrientalDailyNews',
  TaKungPao: 'TaKungPao',
  HK01: 'HK01',
  InitiumMedia: 'InitiumMedia',
  YahooNews: 'YahooNews',
  HKCD: 'HKCD',
  TheEpochTimes: 'TheEpochTimes',
  NowTV: 'NowTV',
  ChineseBBC: 'ChineseBBC',
  VOC: 'VOC',
  HKCourtNews: 'HKCourtNews',
  ICable: 'ICable',
  HKGovernmentNews: 'HKGovernmentNews',
  OrangeNews: 'OrangeNews',
  TheStandard: 'TheStandard',
  HKEJ: 'HKEJ',
  HKET: 'HKET',
  RTHK: 'RTHK',
  TheWitness: 'TheWitness',
  InMediaHK: 'InMediaHK',
  PeopleDaily: 'PeopleDaily',
  XinhuaNewsAgency: 'XinhuaNewsAgency',
  GlobalTimes: 'GlobalTimes',
  CCTV: 'CCTV',
  UnitedDailyNews: 'UnitedDailyNews',
  LibertyTimesNet: 'LibertyTimesNet',
  ChinaTimes: 'ChinaTimes',
  CNA: 'CNA',
  PTSNews: 'PTSNews',
  CTEE: 'CTEE',
  MyPeopleVol: 'MyPeopleVol',
  TaiwanTimes: 'TaiwanTimes',
  ChinaDailyNews: 'ChinaDailyNews',
  SETN: 'SETN',
  NextAppleNews: 'NextAppleNews',
  MirrorMedia: 'MirrorMedia',
  NowNews: 'NowNews',
  StormMedia: 'StormMedia',
  TVBS: 'TVBS',
  EBCNews: 'EBCNews',
  ETtoday: 'ETtoday',
  NewTalk: 'NewTalk',
  FTV: 'FTV'
};

exports.OriginEnum = exports.$Enums.OriginEnum = {
  native: 'native',
  CTS: 'CTS',
  TSSDNews: 'TSSDNews',
  CTWant: 'CTWant',
  TaiwanNews: 'TaiwanNews',
  TTV: 'TTV',
  CTINews: 'CTINews',
  HongKongFreePress: 'HongKongFreePress',
  MingPaoNews: 'MingPaoNews',
  SingTaoDaily: 'SingTaoDaily',
  SCMP: 'SCMP',
  ChineseNewYorkTimes: 'ChineseNewYorkTimes',
  DeutscheWelle: 'DeutscheWelle',
  HKFreePress: 'HKFreePress',
  WenWeiPo: 'WenWeiPo',
  OrientalDailyNews: 'OrientalDailyNews',
  TaKungPao: 'TaKungPao',
  HK01: 'HK01',
  InitiumMedia: 'InitiumMedia',
  YahooNews: 'YahooNews',
  HKCD: 'HKCD',
  TheEpochTimes: 'TheEpochTimes',
  NowTV: 'NowTV',
  ChineseBBC: 'ChineseBBC',
  VOC: 'VOC',
  HKCourtNews: 'HKCourtNews',
  ICable: 'ICable',
  HKGovernmentNews: 'HKGovernmentNews',
  OrangeNews: 'OrangeNews',
  TheStandard: 'TheStandard',
  HKEJ: 'HKEJ',
  HKET: 'HKET',
  RTHK: 'RTHK',
  TheWitness: 'TheWitness',
  InMediaHK: 'InMediaHK',
  PeopleDaily: 'PeopleDaily',
  XinhuaNewsAgency: 'XinhuaNewsAgency',
  GlobalTimes: 'GlobalTimes',
  CCTV: 'CCTV',
  UnitedDailyNews: 'UnitedDailyNews',
  LibertyTimesNet: 'LibertyTimesNet',
  ChinaTimes: 'ChinaTimes',
  CNA: 'CNA',
  PTSNews: 'PTSNews',
  CTEE: 'CTEE',
  MyPeopleVol: 'MyPeopleVol',
  TaiwanTimes: 'TaiwanTimes',
  ChinaDailyNews: 'ChinaDailyNews',
  SETN: 'SETN',
  NextAppleNews: 'NextAppleNews',
  MirrorMedia: 'MirrorMedia',
  NowNews: 'NowNews',
  StormMedia: 'StormMedia',
  TVBS: 'TVBS',
  EBCNews: 'EBCNews',
  ETtoday: 'ETtoday',
  NewTalk: 'NewTalk',
  FTV: 'FTV'
};

exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  FREE_USER: 'FREE_USER',
  PAID_USER: 'PAID_USER',
  BETA_TESTER: 'BETA_TESTER'
};

exports.PoliticalStance = exports.$Enums.PoliticalStance = {
  深綠: '深綠',
  淺綠: '淺綠',
  中立: '中立',
  淺藍: '淺藍',
  深藍: '深藍'
};

exports.Identity = exports.$Enums.Identity = {
  台北人: '台北人',
  新北人: '新北人',
  桃園人: '桃園人',
  台中人: '台中人',
  台南人: '台南人',
  高雄人: '高雄人',
  基隆人: '基隆人',
  新竹人: '新竹人',
  嘉義人: '嘉義人',
  宜蘭人: '宜蘭人',
  花蓮人: '花蓮人',
  台東人: '台東人',
  南投人: '南投人',
  彰化人: '彰化人',
  雲林人: '雲林人',
  屏東人: '屏東人',
  苗栗人: '苗栗人',
  澎湖人: '澎湖人',
  金門人: '金門人',
  連江人: '連江人',
  其他: '其他'
};

exports.InterestingTopic = exports.$Enums.InterestingTopic = {
  國際: '國際',
  財經: '財經',
  科技: '科技',
  教育: '教育',
  社會: '社會',
  文化: '文化',
  環境: '環境',
  娛樂: '娛樂',
  健康: '健康',
  軍隊: '軍隊',
  運動: '運動',
  觀點: '觀點'
};

exports.InterestingRegionOrCountry = exports.$Enums.InterestingRegionOrCountry = {
  台北市: '台北市',
  新北市: '新北市',
  桃園市: '桃園市',
  台中市: '台中市',
  台南市: '台南市',
  高雄市: '高雄市',
  基隆市: '基隆市',
  新竹市: '新竹市',
  嘉義市: '嘉義市',
  宜蘭縣: '宜蘭縣',
  花蓮縣: '花蓮縣',
  台東縣: '台東縣',
  南投縣: '南投縣',
  彰化縣: '彰化縣',
  雲林縣: '雲林縣',
  屏東縣: '屏東縣',
  苗栗縣: '苗栗縣',
  新竹縣: '新竹縣',
  嘉義縣: '嘉義縣',
  澎湖縣: '澎湖縣',
  金門縣: '金門縣',
  連江縣: '連江縣',
  香港: '香港',
  中國: '中國',
  美國: '美國',
  加沙: '加沙',
  以色列: '以色列',
  烏克蘭: '烏克蘭',
  歐盟: '歐盟',
  日本: '日本',
  韓國: '韓國'
};

exports.AuthProvider = exports.$Enums.AuthProvider = {
  EMAIL: 'EMAIL',
  GOOGLE: 'GOOGLE',
  APPLE: 'APPLE'
};

exports.ErrorTypeEnum = exports.$Enums.ErrorTypeEnum = {
  UNMAPPED_MEDIA: 'UNMAPPED_MEDIA',
  PARSING_FAILURE: 'PARSING_FAILURE',
  PARSING_ERROR: 'PARSING_ERROR',
  ZERO_URLS_FETCHED: 'ZERO_URLS_FETCHED',
  OTHERS: 'OTHERS'
};

exports.Prisma.ModelName = {
  Cluster: 'Cluster',
  News: 'News',
  User: 'User',
  UserAuth: 'UserAuth',
  ScrapeFailure: 'ScrapeFailure'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
